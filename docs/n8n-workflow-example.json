{
  "name": "Real Estate Email Lead Processing",
  "nodes": [
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "operation": "getAll",
        "returnAll": false,
        "limit": 10,
        "simple": false,
        "additionalFields": {
          "labelIds": "INBOX",
          "q": "is:unread"
        }
      },
      "id": "gmail-trigger",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "credentials": {
        "gmailOAuth2Api": {
          "id": "gmail-oauth2",
          "name": "Gmail OAuth2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "filter-noreply",
              "leftValue": "={{ $json.from }}",
              "rightValue": "noreply",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "filter-spam",
              "leftValue": "={{ $json.subject }}",
              "rightValue": "spam",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "email-filter",
      "name": "Filter Emails",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract and clean email data\nconst email = $input.first().json;\n\n// Clean HTML from body\nconst cleanBody = email.body.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n\n// Extract email metadata\nconst emailData = {\n  email_id: email.id,\n  from: email.from,\n  subject: email.subject,\n  body: cleanBody,\n  date: email.internalDate,\n  has_attachments: email.payload?.parts?.some(part => part.filename) || false,\n  email_size: email.sizeEstimate || 0\n};\n\n// Add attachments if any\nif (email.payload?.parts) {\n  const attachments = [];\n  for (const part of email.payload.parts) {\n    if (part.filename && part.body?.attachmentId) {\n      attachments.push({\n        filename: part.filename,\n        mime_type: part.mimeType,\n        size: part.body.size || 0,\n        attachment_id: part.body.attachmentId\n      });\n    }\n  }\n  emailData.attachments = attachments;\n}\n\nreturn [{\n  json: emailData\n}];"
      },
      "id": "preprocess-email",
      "name": "Preprocess Email",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "authentication": "apiKey",
        "resource": "chat",
        "operation": "completion",
        "model": "gpt-4",
        "prompt": "Analyze this real estate email and extract lead information in JSON format:\n\nFrom: {{ $json.from }}\nSubject: {{ $json.subject }}\nBody: {{ $json.body }}\n\nPlease extract structured data and determine if this is a real estate lead. Return ONLY valid JSON with this exact structure:\n\n{\n  \"is_lead\": boolean,\n  \"confidence\": number (0-1),\n  \"lead_data\": {\n    \"first_name\": \"string\",\n    \"last_name\": \"string\",\n    \"email\": [\"string\"],\n    \"phone\": [\"string\"],\n    \"company\": \"string\",\n    \"position\": \"string\",\n    \"property_address\": \"string\",\n    \"property_details\": \"string\",\n    \"price_range\": \"string\",\n    \"property_type\": \"string\",\n    \"timeline\": \"string\",\n    \"message\": \"string\",\n    \"lead_source\": \"string\",\n    \"urgency\": \"high|medium|low\"\n  },\n  \"analysis\": {\n    \"intent\": \"buying|selling|investing|general_inquiry\",\n    \"property_type\": \"residential|commercial|land\",\n    \"budget_range\": \"string\",\n    \"location_preferences\": [\"string\"]\n  }\n}",
        "options": {
          "temperature": 0.1,
          "maxTokens": 1000
        }
      },
      "id": "ai-analysis",
      "name": "AI Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai-api",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response and validate\nconst aiResponse = $input.first().json;\nconst emailData = $('Preprocess Email').first().json;\n\nlet aiAnalysis;\ntry {\n  // Try to parse the AI response\n  if (typeof aiResponse.choices?.[0]?.message?.content === 'string') {\n    aiAnalysis = JSON.parse(aiResponse.choices[0].message.content);\n  } else {\n    throw new Error('Invalid AI response format');\n  }\n} catch (error) {\n  // If parsing fails, create a default response\n  aiAnalysis = {\n    is_lead: false,\n    confidence: 0,\n    lead_data: {},\n    analysis: {}\n  };\n}\n\n// Validate required fields\nconst isValidLead = aiAnalysis.is_lead && \n  aiAnalysis.confidence >= 0.7 && \n  aiAnalysis.lead_data?.first_name && \n  aiAnalysis.lead_data?.last_name;\n\n// Prepare data for CRM\nconst leadData = {\n  email_id: emailData.email_id,\n  from: emailData.from,\n  subject: emailData.subject,\n  body: emailData.body,\n  date: emailData.date,\n  ai_analysis: aiAnalysis,\n  attachments: emailData.attachments || []\n};\n\nreturn [{\n  json: {\n    ...leadData,\n    is_valid_lead: isValidLead,\n    should_process: isValidLead\n  }\n}];"
      },
      "id": "validate-data",
      "name": "Validate Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-valid-lead",
              "leftValue": "={{ $json.should_process }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "lead-filter",
      "name": "Filter Valid Leads",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.CRM_WEBHOOK_URL }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.N8N_WEBHOOK_TOKEN }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "email_id",
              "value": "={{ $json.email_id }}"
            },
            {
              "name": "from",
              "value": "={{ $json.from }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.subject }}"
            },
            {
              "name": "body",
              "value": "={{ $json.body }}"
            },
            {
              "name": "date",
              "value": "={{ $json.date }}"
            },
            {
              "name": "ai_analysis",
              "value": "={{ $json.ai_analysis }}"
            },
            {
              "name": "attachments",
              "value": "={{ $json.attachments }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "crm-webhook",
      "name": "Send to CRM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "crm-webhook-auth",
          "name": "CRM Webhook Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log successful processing\nconst data = $input.first().json;\n\nconsole.log('Successfully processed lead:', {\n  email_id: data.email_id,\n  from: data.from,\n  confidence: data.ai_analysis.confidence,\n  person_id: data.person_id\n});\n\nreturn [{\n  json: {\n    status: 'success',\n    message: 'Lead processed successfully',\n    data: data\n  }\n}];"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "jsCode": "// Log skipped emails\nconst data = $input.first().json;\n\nconsole.log('Email skipped (not a lead):', {\n  email_id: data.email_id,\n  from: data.from,\n  confidence: data.ai_analysis.confidence\n});\n\nreturn [{\n  json: {\n    status: 'skipped',\n    message: 'Email not identified as lead',\n    data: data\n  }\n}];"
      },
      "id": "log-skipped",
      "name": "Log Skipped",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 400]
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Filter Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Emails": {
      "main": [
        [
          {
            "node": "Preprocess Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preprocess Email": {
      "main": [
        [
          {
            "node": "AI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Analysis": {
      "main": [
        [
          {
            "node": "Validate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Data": {
      "main": [
        [
          {
            "node": "Filter Valid Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Valid Leads": {
      "main": [
        [
          {
            "node": "Send to CRM",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Skipped",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to CRM": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "real-estate",
      "name": "Real Estate"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
} 