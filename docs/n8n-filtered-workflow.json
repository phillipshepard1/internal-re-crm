{
  "name": "Filtered Email Lead Processing - Cost Optimized",
  "nodes": [
    {
      "parameters": {
        "authentication": "gmailOAuth2",
        "resource": "message",
        "operation": "getAll",
        "returnAll": true,
        "maxResults": 10,
        "simple": false
      },
      "id": "gmail-trigger",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Pre-filter emails before sending to OpenAI to reduce costs\nconst emailData = $input.first().json;\n\n// Extract email domain\nconst fromEmail = emailData.from?.text || emailData.from || '';\nconst emailDomain = fromEmail.split('@')[1]?.toLowerCase() || '';\nconst subject = (emailData.subject || '').toLowerCase();\nconst body = (emailData.text || emailData.snippet || '').toLowerCase();\n\n// Define known lead source patterns (you can customize these)\nconst leadSourcePatterns = [\n  // Email domains\n  'zillow.com',\n  'realtor.com', \n  'homestack.com',\n  'redfin.com',\n  'trulia.com',\n  'realtor.ca',\n  'remax.ca',\n  'century21.ca',\n  'royallepage.ca',\n  'sothebysrealty.ca',\n  // Add your website domain\n  'yourdomain.com',\n  'stresslesscrm.com'\n];\n\n// Define keywords that indicate real estate interest\nconst realEstateKeywords = [\n  'property', 'house', 'home', 'listing', 'inquiry', 'interest',\n  'buy', 'buying', 'sell', 'selling', 'invest', 'investment',\n  'real estate', 'realtor', 'agent', 'viewing', 'schedule',\n  'price', 'budget', 'location', 'neighborhood', 'bedroom',\n  'bathroom', 'square feet', 'sq ft', 'acres', 'lot size'\n];\n\n// Check if email is from a known lead source\nconst isFromLeadSource = leadSourcePatterns.some(pattern => \n  emailDomain.includes(pattern.toLowerCase())\n);\n\n// Check if email contains real estate keywords\nconst hasRealEstateKeywords = realEstateKeywords.some(keyword =>\n  subject.includes(keyword) || body.includes(keyword)\n);\n\n// Skip common non-lead emails\nconst skipPatterns = [\n  'noreply@', 'no-reply@', 'donotreply@', 'mailer-daemon@',\n  'postmaster@', 'bounce@', 'spam@', 'newsletter@', 'marketing@'\n];\n\nconst shouldSkip = skipPatterns.some(pattern => \n  fromEmail.toLowerCase().includes(pattern)\n);\n\n// Determine if email should be processed\nconst shouldProcess = !shouldSkip && (isFromLeadSource || hasRealEstateKeywords);\n\nconsole.log('Email pre-filtering result:', {\n  from: fromEmail,\n  domain: emailDomain,\n  subject: emailData.subject,\n  isFromLeadSource,\n  hasRealEstateKeywords,\n  shouldSkip,\n  shouldProcess,\n  reasons: {\n    leadSource: isFromLeadSource ? `Domain matches: ${emailDomain}` : null,\n    keywords: hasRealEstateKeywords ? 'Contains real estate keywords' : null,\n    skip: shouldSkip ? `From skip pattern: ${fromEmail}` : null\n  }\n});\n\n// Add filtering metadata\nconst enhancedData = {\n  ...emailData,\n  pre_filter: {\n    should_process: shouldProcess,\n    is_from_lead_source: isFromLeadSource,\n    has_real_estate_keywords: hasRealEstateKeywords,\n    should_skip: shouldSkip,\n    email_domain: emailDomain,\n    reasons: {\n      leadSource: isFromLeadSource ? `Domain matches: ${emailDomain}` : null,\n      keywords: hasRealEstateKeywords ? 'Contains real estate keywords' : null,\n      skip: shouldSkip ? `From skip pattern: ${fromEmail}` : null\n    }\n  }\n};\n\nreturn [{ json: enhancedData }];"
      },
      "id": "pre-filter",
      "name": "Pre-filter Emails",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "should-process",
              "leftValue": "={{ $json.pre_filter.should_process }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "process-filter",
      "name": "Process Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "authentication": "openAiApi",
        "resource": "chat",
        "operation": "message",
        "model": "gpt-4",
        "messages": {
          "message": [
            {
              "role": "system",
              "content": "You are an expert real estate lead detection AI. Analyze emails to identify potential real estate leads and extract structured data."
            },
            {
              "role": "user",
              "content": "Analyze this real estate email and extract lead information. Return ONLY valid JSON:\n\nFrom: {{ $json.from.text }}\nSubject: {{ $json.subject }}\nBody: {{ $json.text }}\n\n{\n  \"is_lead\": true/false,\n  \"confidence\": 0.0-1.0,\n  \"lead_data\": {\n    \"first_name\": \"string\",\n    \"last_name\": \"string\",\n    \"email\": [\"string\"],\n    \"phone\": [\"string\"],\n    \"property_details\": \"string\",\n    \"price_range\": \"string\",\n    \"timeline\": \"string\",\n    \"message\": \"string\",\n    \"lead_source\": \"email\",\n    \"urgency\": \"high/medium/low\"\n  },\n  \"analysis\": {\n    \"intent\": \"buying/selling/investing/general_inquiry\",\n    \"property_type\": \"residential/commercial/land\",\n    \"budget_range\": \"string\",\n    \"location_preferences\": [\"string\"]\n  }\n}"
            }
          ]
        }
      },
      "id": "openai-analysis",
      "name": "OpenAI Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "jsCode": "// Add metadata and validation\nconst emailData = $input.first().json;\nconst aiAnalysis = $('OpenAI Analysis').first().json;\n\n// Parse AI analysis\nlet parsedAnalysis;\ntry {\n  parsedAnalysis = JSON.parse(aiAnalysis.choices[0].message.content);\n} catch (error) {\n  // If parsing fails, create default analysis\n  parsedAnalysis = {\n    is_lead: false,\n    confidence: 0.0,\n    lead_data: {},\n    analysis: {}\n  };\n}\n\n// Add processing metadata\nconst enhancedData = {\n  email_id: emailData.id,\n  from: emailData.from.text || emailData.from,\n  subject: emailData.subject,\n  body: emailData.text || emailData.snippet,\n  date: emailData.date || emailData.internalDate,\n  user_id: $env.USER_ID || 'system',\n  processing_timestamp: new Date().toISOString(),\n  ai_analysis: parsedAnalysis,\n  pre_filter: emailData.pre_filter,\n  // Add validation flags\n  is_valid_lead: parsedAnalysis.is_lead && parsedAnalysis.confidence >= 0.7,\n  has_contact_info: !!(parsedAnalysis.lead_data?.email?.length > 0 || parsedAnalysis.lead_data?.phone?.length > 0),\n  has_property_info: !!(parsedAnalysis.lead_data?.property_details || parsedAnalysis.lead_data?.price_range)\n};\n\nreturn [{ json: enhancedData }];"
      },
      "id": "enhance-data",
      "name": "Enhance Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-valid-lead",
              "leftValue": "={{ $json.is_valid_lead }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "lead-filter",
      "name": "Lead Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "url": "https://app.stresslesscrm.com/api/n8n/process-lead",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.N8N_WEBHOOK_TOKEN }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "email_id",
              "value": "{{ $json.email_id }}"
            },
            {
              "name": "from",
              "value": "{{ $json.from }}"
            },
            {
              "name": "subject",
              "value": "{{ $json.subject }}"
            },
            {
              "name": "body",
              "value": "{{ $json.body }}"
            },
            {
              "name": "date",
              "value": "{{ $json.date }}"
            },
            {
              "name": "user_id",
              "value": "{{ $json.user_id }}"
            },
            {
              "name": "ai_analysis",
              "value": "{{ $json.ai_analysis }}"
            }
          ]
        }
      },
      "id": "send-to-crm",
      "name": "Send to CRM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 100]
    },
    {
      "parameters": {
        "jsCode": "// Log successful lead processing\nconst data = $input.first().json;\nconst crmResponse = $('Send to CRM').first().json;\n\nconsole.log('Lead processed successfully:', {\n  email_id: data.email_id,\n  from: data.from,\n  confidence: data.ai_analysis.confidence,\n  person_id: crmResponse.person_id,\n  timestamp: new Date().toISOString()\n});\n\nreturn [{ json: {\n  success: true,\n  message: 'Lead processed and added to staging',\n  email_id: data.email_id,\n  person_id: crmResponse.person_id,\n  confidence: data.ai_analysis.confidence\n} }];"
      },
      "id": "success-log",
      "name": "Success Log",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 100]
    },
    {
      "parameters": {
        "jsCode": "// Log non-lead emails that passed pre-filter\nconst data = $input.first().json;\n\nconsole.log('Email processed (not a lead):', {\n  email_id: data.email_id,\n  from: data.from,\n  confidence: data.ai_analysis.confidence,\n  reason: data.ai_analysis.confidence < 0.7 ? 'Low confidence' : 'Not identified as lead',\n  timestamp: new Date().toISOString()\n});\n\nreturn [{ json: {\n  success: true,\n  message: 'Email processed (not a lead)',\n  email_id: data.email_id,\n  confidence: data.ai_analysis.confidence\n} }];"
      },
      "id": "non-lead-log",
      "name": "Non-Lead Log",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "jsCode": "// Log filtered out emails (cost savings)\nconst data = $input.first().json;\n\nconsole.log('Email filtered out (cost savings):', {\n  email_id: data.id,\n  from: data.from.text || data.from,\n  subject: data.subject,\n  pre_filter: data.pre_filter,\n  timestamp: new Date().toISOString()\n});\n\nreturn [{ json: {\n  success: true,\n  message: 'Email filtered out - no OpenAI cost',\n  email_id: data.id,\n  filter_reasons: data.pre_filter.reasons\n} }];"
      },
      "id": "filtered-log",
      "name": "Filtered Log",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400]
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Pre-filter Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pre-filter Emails": {
      "main": [
        [
          {
            "node": "Process Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Filter": {
      "main": [
        [
          {
            "node": "OpenAI Analysis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Filtered Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Analysis": {
      "main": [
        [
          {
            "node": "Enhance Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhance Data": {
      "main": [
        [
          {
            "node": "Lead Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lead Filter": {
      "main": [
        [
          {
            "node": "Send to CRM",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Non-Lead Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to CRM": {
      "main": [
        [
          {
            "node": "Success Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
} 